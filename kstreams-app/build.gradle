buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.15.1"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.2"
    }
}

plugins {
    id 'java'
    id "com.google.cloud.tools.jib" version "1.5.0"
}

group = 'io.confluent'
version = '0.0.10'
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

def props = new Properties()
file("../env_files/config.env").withInputStream { props.load(it) }

ext {
  cpVersion = props.getProperty("CONFLUENT") ?: '6.2.0'
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = 'https://packages.confluent.io/maven/'
    }
}

apply plugin: "com.commercehub.gradle.plugin.avro"
apply plugin: "com.github.johnrengelman.shadow"

dependencies {
    implementation "org.apache.avro:avro:1.10.2"
    implementation "org.slf4j:slf4j-simple:1.7.30"
    implementation "org.apache.kafka:kafka-clients:${cpVersion}-ce"
    implementation "org.apache.kafka:kafka-streams:${cpVersion}-ce"
    implementation "io.confluent:monitoring-interceptors:${cpVersion}"
    implementation "io.confluent:kafka-avro-serializer:${cpVersion}"
    implementation "io.confluent:kafka-streams-avro-serde:${cpVersion}"
    implementation "org.apache.avro:avro-maven-plugin:1.8.2"
    
    testImplementation "org.apache.kafka:kafka-streams-test-utils:${cpVersion}-ce"
    testImplementation "junit:junit:4.13.2"
    testCompile "org.assertj:assertj-core:3.3.0"
}

test {
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

// TODO: How do we handle multiple projects inside this package?
jar {
    manifest {
       attributes(
            "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
            "Main-Class": "io.confluent.demos.common.wiki.WikipediaActivityMonitor"
       )
    }
}

jib {
  from.image = "confluentinc/cp-kafka:${cpVersion}"
  to.image = "cnfldemos/cp-demo-kstreams:${version}"
  container {
    entrypoint = '/app/start.sh'
    creationTime = 'USE_CURRENT_TIMESTAMP'
  }
  extraDirectories {
    permissions = [
      '/app/start.sh': '755'
    ]
  }
}
