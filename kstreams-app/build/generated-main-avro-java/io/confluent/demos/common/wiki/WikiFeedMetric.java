/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.demos.common.wiki;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WikiFeedMetric extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6031076081661339841L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WikiFeedMetric\",\"namespace\":\"io.confluent.demos.common.wiki\",\"fields\":[{\"name\":\"channel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Associated channel\"},{\"name\":\"editCount\",\"type\":\"long\",\"doc\":\"The count of edits for the channel\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WikiFeedMetric> ENCODER =
      new BinaryMessageEncoder<WikiFeedMetric>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WikiFeedMetric> DECODER =
      new BinaryMessageDecoder<WikiFeedMetric>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<WikiFeedMetric> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<WikiFeedMetric> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WikiFeedMetric>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this WikiFeedMetric to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a WikiFeedMetric from a ByteBuffer. */
  public static WikiFeedMetric fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Associated channel */
  @Deprecated public java.lang.String channel;
  /** The count of edits for the channel */
  @Deprecated public long editCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WikiFeedMetric() {}

  /**
   * All-args constructor.
   * @param channel Associated channel
   * @param editCount The count of edits for the channel
   */
  public WikiFeedMetric(java.lang.String channel, java.lang.Long editCount) {
    this.channel = channel;
    this.editCount = editCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return channel;
    case 1: return editCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: channel = (java.lang.String)value$; break;
    case 1: editCount = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'channel' field.
   * @return Associated channel
   */
  public java.lang.String getChannel() {
    return channel;
  }

  /**
   * Sets the value of the 'channel' field.
   * Associated channel
   * @param value the value to set.
   */
  public void setChannel(java.lang.String value) {
    this.channel = value;
  }

  /**
   * Gets the value of the 'editCount' field.
   * @return The count of edits for the channel
   */
  public java.lang.Long getEditCount() {
    return editCount;
  }

  /**
   * Sets the value of the 'editCount' field.
   * The count of edits for the channel
   * @param value the value to set.
   */
  public void setEditCount(java.lang.Long value) {
    this.editCount = value;
  }

  /**
   * Creates a new WikiFeedMetric RecordBuilder.
   * @return A new WikiFeedMetric RecordBuilder
   */
  public static io.confluent.demos.common.wiki.WikiFeedMetric.Builder newBuilder() {
    return new io.confluent.demos.common.wiki.WikiFeedMetric.Builder();
  }

  /**
   * Creates a new WikiFeedMetric RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WikiFeedMetric RecordBuilder
   */
  public static io.confluent.demos.common.wiki.WikiFeedMetric.Builder newBuilder(io.confluent.demos.common.wiki.WikiFeedMetric.Builder other) {
    return new io.confluent.demos.common.wiki.WikiFeedMetric.Builder(other);
  }

  /**
   * Creates a new WikiFeedMetric RecordBuilder by copying an existing WikiFeedMetric instance.
   * @param other The existing instance to copy.
   * @return A new WikiFeedMetric RecordBuilder
   */
  public static io.confluent.demos.common.wiki.WikiFeedMetric.Builder newBuilder(io.confluent.demos.common.wiki.WikiFeedMetric other) {
    return new io.confluent.demos.common.wiki.WikiFeedMetric.Builder(other);
  }

  /**
   * RecordBuilder for WikiFeedMetric instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WikiFeedMetric>
    implements org.apache.avro.data.RecordBuilder<WikiFeedMetric> {

    /** Associated channel */
    private java.lang.String channel;
    /** The count of edits for the channel */
    private long editCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.demos.common.wiki.WikiFeedMetric.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.channel)) {
        this.channel = data().deepCopy(fields()[0].schema(), other.channel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.editCount)) {
        this.editCount = data().deepCopy(fields()[1].schema(), other.editCount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WikiFeedMetric instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.demos.common.wiki.WikiFeedMetric other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.channel)) {
        this.channel = data().deepCopy(fields()[0].schema(), other.channel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.editCount)) {
        this.editCount = data().deepCopy(fields()[1].schema(), other.editCount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'channel' field.
      * Associated channel
      * @return The value.
      */
    public java.lang.String getChannel() {
      return channel;
    }

    /**
      * Sets the value of the 'channel' field.
      * Associated channel
      * @param value The value of 'channel'.
      * @return This builder.
      */
    public io.confluent.demos.common.wiki.WikiFeedMetric.Builder setChannel(java.lang.String value) {
      validate(fields()[0], value);
      this.channel = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'channel' field has been set.
      * Associated channel
      * @return True if the 'channel' field has been set, false otherwise.
      */
    public boolean hasChannel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'channel' field.
      * Associated channel
      * @return This builder.
      */
    public io.confluent.demos.common.wiki.WikiFeedMetric.Builder clearChannel() {
      channel = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'editCount' field.
      * The count of edits for the channel
      * @return The value.
      */
    public java.lang.Long getEditCount() {
      return editCount;
    }

    /**
      * Sets the value of the 'editCount' field.
      * The count of edits for the channel
      * @param value The value of 'editCount'.
      * @return This builder.
      */
    public io.confluent.demos.common.wiki.WikiFeedMetric.Builder setEditCount(long value) {
      validate(fields()[1], value);
      this.editCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'editCount' field has been set.
      * The count of edits for the channel
      * @return True if the 'editCount' field has been set, false otherwise.
      */
    public boolean hasEditCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'editCount' field.
      * The count of edits for the channel
      * @return This builder.
      */
    public io.confluent.demos.common.wiki.WikiFeedMetric.Builder clearEditCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WikiFeedMetric build() {
      try {
        WikiFeedMetric record = new WikiFeedMetric();
        record.channel = fieldSetFlags()[0] ? this.channel : (java.lang.String) defaultValue(fields()[0]);
        record.editCount = fieldSetFlags()[1] ? this.editCount : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WikiFeedMetric>
    WRITER$ = (org.apache.avro.io.DatumWriter<WikiFeedMetric>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WikiFeedMetric>
    READER$ = (org.apache.avro.io.DatumReader<WikiFeedMetric>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
